# Создайте модуль с функцией внутри. 
# Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.
import random

def puzzle(puzzle_text: str, solutions: list[str], tries: int) -> int:
    print(puzzle_text)
    solutions = list(map(lambda x: x.lower(), solutions))
    num = 0
    while num < tries:
        user_input = input("Введите вариант ответа: ").lower()
        if user_input in solutions:
            return num +1
        else:
            print("Не угадал, попробуй еще")
        num +=1
    return 0

# Добавьте в модуль с загадками функцию, которая хранит словарь списков. 
# Ключ словаря - загадка, значение - список с отгадками. 
# Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки. 

def puzzle_solut():
    dict_puzzle = {'Зимой и летом одним цветом': ['ель', 'елка', 'доллар'], 'Висит груша - нельзя скушать': ['груша', 'игрушка', 'лампочка']}

    for key, value in dict_puzzle.items():
        puzzle(key, value, random.randint(3,6))

# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) 
# и число (номер попытки, с которой она угадана). 
# Функция формирует словарь с информацией о результатах отгадывания. 
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания 
# из защищённого словаря в удобном для чтения виде. 
# Для формирования результатов используйте генераторное выражение.

_solution = {}

puzzles_dict = {
    'Зимой и летом одним цветом': ['ель', 'елка', 'доллар'],
    'Висит груша - нельзя скушать': ['груша', 'игрушка', 'лампочка']
}

def puzzle_solver(puzzle_text: str, tries: int):
    num = puzzle(puzzle_text, puzzles_dict[puzzle_text], tries)
    _solution[puzzle_text] = [num, True if num else False]

def show_results():
    for k,v in _solution.items():
        print(k,v)
    




